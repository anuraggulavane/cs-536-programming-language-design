{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/asgn2.rs","byte_start":5648,"byte_end":5651,"line_start":149,"line_end":149,"column_start":3,"column_end":6,"is_primary":true,"text":[{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":3,"highlight_end":6}],"label":"expected `Expr`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/asgn2.rs","byte_start":4456,"byte_end":6213,"line_start":128,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"peg::parser!{","highlight_start":1,"highlight_end":14},{"text":"  pub grammar parser() for str {","highlight_start":1,"highlight_end":33},{"text":"  /* Provided helper functions to make the starter code type-check */","highlight_start":1,"highlight_end":70},{"text":"  pub rule unimplemented_string() -> String = empty:$(\"\") {? Ok(empty.to_string())}","highlight_start":1,"highlight_end":84},{"text":"  pub rule unimplemented_expr() -> Expr = empty:$(\"\") {? Ok(Expr::Numeral(383962395862.0)) }","highlight_start":1,"highlight_end":93},{"text":"  pub rule unimplemented_defn() -> Defn = empty:$(\"\") {? Ok(Defn::VarDefn(\"x\".to_string(), Box::new(Expr::Numeral(893.923))))}","highlight_start":1,"highlight_end":127},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":" /* Parse a single variable. The cleanest solution uses id() as a helper.","highlight_start":1,"highlight_end":74},{"text":"    var() behaves just like id(), except with a different return type.","highlight_start":1,"highlight_end":71},{"text":"    Staff solution length: 1 lines */ ","highlight_start":1,"highlight_end":39},{"text":"  pub rule id() -> String = s:$(['a'..='z'|'A'..='Z'] (['a'..='z'|'A'..='Z'|'0'..='9'|'_'])*) { s.to_string()}","highlight_start":1,"highlight_end":111},{"text":"  pub rule var() -> Expr = x:id(){ Expr::Id (x)}","highlight_start":1,"highlight_end":49},{"text":"  /* Parse a single literal number. ","highlight_start":1,"highlight_end":37},{"text":"    Staff solution length: 6 lines */","highlight_start":1,"highlight_end":38},{"text":"  pub rule numeral() -> Expr = ","highlight_start":1,"highlight_end":32},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) expressions. You should define","highlight_start":1,"highlight_end":69},{"text":"     and call your own helpers. See the precedence-climbing approach","highlight_start":1,"highlight_end":69},{"text":"     from the book and lecture to help decide on your helpers.","highlight_start":1,"highlight_end":63},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 10 lines, including 7 helpers */","highlight_start":1,"highlight_end":61},{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":1,"highlight_end":49},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) definitions.","highlight_start":1,"highlight_end":51},{"text":"     You are allowed to define and call your own helpers if you prefer.","highlight_start":1,"highlight_end":72},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 3 lines, no new helpers.","highlight_start":1,"highlight_end":53},{"text":"     Depending on your approach, your \"expr\" could be shorter and your \"defn\"","highlight_start":1,"highlight_end":78},{"text":"     could be longer, with different numbers of helpers for each.","highlight_start":1,"highlight_end":66},{"text":"     You are not graded on length, the goal is to communicate typical complexity","highlight_start":1,"highlight_end":81},{"text":"     ) */","highlight_start":1,"highlight_end":10},{"text":"  pub rule defn() -> Defn = unimplemented_defn()","highlight_start":1,"highlight_end":49},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"peg::parser!","def_site_span":{"file_name":"/Users/anuraggulavane/.cargo/registry/src/index.crates.io-6f17d22bba15001f/peg-macros-0.8.4/lib.rs","byte_start":476,"byte_end":548,"line_start":22,"line_end":22,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub fn parser(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/asgn2.rs","byte_start":5648,"byte_end":5651,"line_start":149,"line_end":149,"column_start":3,"column_end":6,"is_primary":true,"text":[{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":3,"highlight_end":6}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/asgn2.rs","byte_start":4456,"byte_end":6213,"line_start":128,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"peg::parser!{","highlight_start":1,"highlight_end":14},{"text":"  pub grammar parser() for str {","highlight_start":1,"highlight_end":33},{"text":"  /* Provided helper functions to make the starter code type-check */","highlight_start":1,"highlight_end":70},{"text":"  pub rule unimplemented_string() -> String = empty:$(\"\") {? Ok(empty.to_string())}","highlight_start":1,"highlight_end":84},{"text":"  pub rule unimplemented_expr() -> Expr = empty:$(\"\") {? Ok(Expr::Numeral(383962395862.0)) }","highlight_start":1,"highlight_end":93},{"text":"  pub rule unimplemented_defn() -> Defn = empty:$(\"\") {? Ok(Defn::VarDefn(\"x\".to_string(), Box::new(Expr::Numeral(893.923))))}","highlight_start":1,"highlight_end":127},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":" /* Parse a single variable. The cleanest solution uses id() as a helper.","highlight_start":1,"highlight_end":74},{"text":"    var() behaves just like id(), except with a different return type.","highlight_start":1,"highlight_end":71},{"text":"    Staff solution length: 1 lines */ ","highlight_start":1,"highlight_end":39},{"text":"  pub rule id() -> String = s:$(['a'..='z'|'A'..='Z'] (['a'..='z'|'A'..='Z'|'0'..='9'|'_'])*) { s.to_string()}","highlight_start":1,"highlight_end":111},{"text":"  pub rule var() -> Expr = x:id(){ Expr::Id (x)}","highlight_start":1,"highlight_end":49},{"text":"  /* Parse a single literal number. ","highlight_start":1,"highlight_end":37},{"text":"    Staff solution length: 6 lines */","highlight_start":1,"highlight_end":38},{"text":"  pub rule numeral() -> Expr = ","highlight_start":1,"highlight_end":32},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) expressions. You should define","highlight_start":1,"highlight_end":69},{"text":"     and call your own helpers. See the precedence-climbing approach","highlight_start":1,"highlight_end":69},{"text":"     from the book and lecture to help decide on your helpers.","highlight_start":1,"highlight_end":63},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 10 lines, including 7 helpers */","highlight_start":1,"highlight_end":61},{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":1,"highlight_end":49},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) definitions.","highlight_start":1,"highlight_end":51},{"text":"     You are allowed to define and call your own helpers if you prefer.","highlight_start":1,"highlight_end":72},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 3 lines, no new helpers.","highlight_start":1,"highlight_end":53},{"text":"     Depending on your approach, your \"expr\" could be shorter and your \"defn\"","highlight_start":1,"highlight_end":78},{"text":"     could be longer, with different numbers of helpers for each.","highlight_start":1,"highlight_end":66},{"text":"     You are not graded on length, the goal is to communicate typical complexity","highlight_start":1,"highlight_end":81},{"text":"     ) */","highlight_start":1,"highlight_end":10},{"text":"  pub rule defn() -> Defn = unimplemented_defn()","highlight_start":1,"highlight_end":49},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"peg::parser!","def_site_span":{"file_name":"/Users/anuraggulavane/.cargo/registry/src/index.crates.io-6f17d22bba15001f/peg-macros-0.8.4/lib.rs","byte_start":476,"byte_end":548,"line_start":22,"line_end":22,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub fn parser(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type constructed contains `()` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"src/asgn2.rs","byte_start":5648,"byte_end":5651,"line_start":149,"line_end":149,"column_start":3,"column_end":6,"is_primary":true,"text":[{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":3,"highlight_end":6}],"label":"this argument influences the type of `{{root}}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/asgn2.rs","byte_start":4456,"byte_end":6213,"line_start":128,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"peg::parser!{","highlight_start":1,"highlight_end":14},{"text":"  pub grammar parser() for str {","highlight_start":1,"highlight_end":33},{"text":"  /* Provided helper functions to make the starter code type-check */","highlight_start":1,"highlight_end":70},{"text":"  pub rule unimplemented_string() -> String = empty:$(\"\") {? Ok(empty.to_string())}","highlight_start":1,"highlight_end":84},{"text":"  pub rule unimplemented_expr() -> Expr = empty:$(\"\") {? Ok(Expr::Numeral(383962395862.0)) }","highlight_start":1,"highlight_end":93},{"text":"  pub rule unimplemented_defn() -> Defn = empty:$(\"\") {? Ok(Defn::VarDefn(\"x\".to_string(), Box::new(Expr::Numeral(893.923))))}","highlight_start":1,"highlight_end":127},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":" /* Parse a single variable. The cleanest solution uses id() as a helper.","highlight_start":1,"highlight_end":74},{"text":"    var() behaves just like id(), except with a different return type.","highlight_start":1,"highlight_end":71},{"text":"    Staff solution length: 1 lines */ ","highlight_start":1,"highlight_end":39},{"text":"  pub rule id() -> String = s:$(['a'..='z'|'A'..='Z'] (['a'..='z'|'A'..='Z'|'0'..='9'|'_'])*) { s.to_string()}","highlight_start":1,"highlight_end":111},{"text":"  pub rule var() -> Expr = x:id(){ Expr::Id (x)}","highlight_start":1,"highlight_end":49},{"text":"  /* Parse a single literal number. ","highlight_start":1,"highlight_end":37},{"text":"    Staff solution length: 6 lines */","highlight_start":1,"highlight_end":38},{"text":"  pub rule numeral() -> Expr = ","highlight_start":1,"highlight_end":32},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) expressions. You should define","highlight_start":1,"highlight_end":69},{"text":"     and call your own helpers. See the precedence-climbing approach","highlight_start":1,"highlight_end":69},{"text":"     from the book and lecture to help decide on your helpers.","highlight_start":1,"highlight_end":63},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 10 lines, including 7 helpers */","highlight_start":1,"highlight_end":61},{"text":"  pub rule expr() -> Expr = unimplemented_expr()","highlight_start":1,"highlight_end":49},{"text":"  ","highlight_start":1,"highlight_end":3},{"text":"  /* Implement a parser for (all the) definitions.","highlight_start":1,"highlight_end":51},{"text":"     You are allowed to define and call your own helpers if you prefer.","highlight_start":1,"highlight_end":72},{"text":"     Both expr() and defn() will call each other.","highlight_start":1,"highlight_end":50},{"text":"     Staff solution length: 3 lines, no new helpers.","highlight_start":1,"highlight_end":53},{"text":"     Depending on your approach, your \"expr\" could be shorter and your \"defn\"","highlight_start":1,"highlight_end":78},{"text":"     could be longer, with different numbers of helpers for each.","highlight_start":1,"highlight_end":66},{"text":"     You are not graded on length, the goal is to communicate typical complexity","highlight_start":1,"highlight_end":81},{"text":"     ) */","highlight_start":1,"highlight_end":10},{"text":"  pub rule defn() -> Defn = unimplemented_defn()","highlight_start":1,"highlight_end":49},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"peg::parser!","def_site_span":{"file_name":"/Users/anuraggulavane/.cargo/registry/src/index.crates.io-6f17d22bba15001f/peg-macros-0.8.4/lib.rs","byte_start":476,"byte_end":548,"line_start":22,"line_end":22,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub fn parser(input: proc_macro::TokenStream) -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/Users/anuraggulavane/.cargo/registry/src/index.crates.io-6f17d22bba15001f/peg-runtime-0.8.3/lib.rs","byte_start":508,"byte_end":515,"line_start":17,"line_end":17,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    Matched(usize, T),","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asgn2.rs:149:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub rule expr() -> Expr = unimplemented_expr()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Expr`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `()` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asgn2.rs:149:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub rule expr() -> Expr = unimplemented_expr()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis argument influences the type of `{{root}}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/anuraggulavane/.cargo/registry/src/index.crates.io-6f17d22bba15001f/peg-runtime-0.8.3/lib.rs:17:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Matched(usize, T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `peg::parser` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
